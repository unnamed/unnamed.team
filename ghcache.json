{"commons":{"repo":{"fullName":"unnamed/commons","name":"commons","stars":5,"contents":"https://api.github.com/repos/unnamed/commons/contents/{+path}"},"content":{"error":{"error.md":"# Error\n\nLibrary for multiple-error handling and complete error report.\n\n## Examples\n\nWe usually just throw an exception if something is wrong\n\n```java\nfor (Listener listener : getListenersForEvent(event)) {\n    try {\n        listener.listen(event);\n    } catch (Exception e) {\n        throw new EventException(\"Cannot pass event \" + event.getName(), e); \n    }\n}\n```\n\nThis only reports the first error found, bad if we want to fix all the errors without having to compile, test, find\nerrors, fix and so on with all the errors, because it will be reported one at a time.\n\nBut with this library:\n\n```java\n// the main message of the errors\nErrorDetails errors = new ErrorDetails(\"Cannot pass event \" + event.getName());\nfor (Listener listener : getListenersForEvent(event)) {\n    try {\n        listener.listen(event);\n    } catch (Exception e) {\n        // error is added, not thrown\n        errors.add(e);\n    }\n}\n// then, throw all exceptions once\nthrow errors.toException(EventException::new);\n```\n\nThis reports all errors, not only the first. It also prints a pretty message with all the stack traces in this format:\n\n```cs\nException in thread <thread> <package>.EventException: Cannot pass event <eventName>\n1) java.lang.NullPointerException: null\n    at sample.stack.Trace.make(Trace.java:25)\n    at sample.stack.Trace.make(Trace.java:34)\n    at sample.stack.Trace.create(Trace.java:50)\n    at sample.listener.Listener.listen(Listener.java:32)\n\n2) java.lang.IllegalStateException: The library is so cool\n    at sample.stack.Trace.make(Trace.java:25)\n    at sample.stack.Trace.make(Trace.java:34)\n    at sample.stack.Trace.create(Trace.java:50)\n    at sample.listener.Listener.listen(Listener.java:32)\n```\n\nAll stack-traces enumerated and formatted\n\n## Dependency\n\nYou can download the JAR in the repository releases, also you can just add the dependency to your `pom.xml`\n\nRepository:\n\n```xml\n<repository>\n    <id>unnamed-releases</id>\n    <url>https://repo.unnamed.team/repository/unnamed-releases/</url>\n</repository>\n```\n\nDependency:\n\n```xml\n<dependency>\n    <groupId>team.unnamed.common</groupId>\n    <artifactId>error</artifactId>\n    <version>VERSION</version>\n</dependency>\n```"},"index.md":"# Unnamed Commons [![Build Status](https://travis-ci.com/unnamed/commons.svg?branch=master)](https://travis-ci.com/unnamed/commons)\n\nCollection of public util and lightweight libraries of Unnamed Development Team. Actually, there're only 4 modules:\n\n- [Reflection](https://github.com/unnamed/commons/tree/master/reflect) for easy handling of types and generic types\n  using [TypeReference](https://github.com/unnamed/commons/blob/master/reflect/src/main/java/team/unnamed/reflect/identity/TypeReference.java)\n- [Validation](https://github.com/unnamed/commons/tree/master/validation) for creating fail-fast (If an entered argument\n  is invalid, the method must not respond as if it were a valid argument) APIs, shorten code, etc.\n- [Error](https://github.com/unnamed/commons/tree/master/error) for multiple error logging, track all errors, once all\n  have been collected, warn about all, not just the first one\n- [Functional](https://github.com/unnamed/commons/tree/master/functional) for programming with a functional-style, using\n  Java 8 lambda functional interfaces, lambda method references\n\nThese small but useful libraries are used in various other libraries in our organization.\n","reflect":{"reflect.md":"# Reflect Utils\n\nThere're some classes for easy handling of types, generic types, and other things with reflection. This module contains\nthree principal util classes:\n\n- [TypeReference](https://github.com/unnamed/commons/blob/master/reflect/src/main/java/team/unnamed/reflect/identity/TypeReference.java) (\n  An util class for handling generic and raw types,\n  like [Google Gson's TypeToken](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/reflect/TypeToken.java))\n- [Types](https://github.com/unnamed/commons/blob/master/reflect/src/main/java/team/unnamed/reflect/identity/Types.java) (\n  A collection of util methods for resolving types and constructing `TypeReference` objects)\n- [ContextualTypes](https://github.com/unnamed/commons/blob/master/reflect/src/main/java/team/unnamed/reflect/identity/resolve/ContextualTypes.java)\n  . Util methods for contextually-resolve types (TypeVariables)\n\n## Usage\n\nThe main use of `TypeReference` is to easily manipulate (compare, store, etc) generic types. You can see some examples\nin [syringe](https://github.com/unnamed/syringe) (A dependency injection framework)\n\n```java\n// Here we create a type reference that holds a List<String> generic type\nTypeReference<List<String>> listType = new TypeReference<List<String>>() {};\n\n// Now we check all the method return types and parameters (fully-specified)\nfor (Method method : List.class.getDeclaredMethods()) {\n  List<TypeReference<?>> parameterTypes = listType.getParameters(method);\n  TypeReference<?> returnType = listType.getReturnType(method);\n}\n```\n\nA type is `fully-specified` when it doesn't require a context or a `GenericDeclaration` to be completed. For example:\n\n```java\npublic class Foo<T> { // GenericDeclaration\n\n    private final List<T> list; // non-fully-specified type\n    private final Set<String> set; // fully-specified type!\n\n    // ...\n}\n```\n\nHere, the `list` cannot be completed if there isn't a GenericDeclaration.\n`TypeReference`, `Types` and `ContextualTypes` helps you with this.\n\n## Dependency\n\nYou can download the JAR in the repository releases, also you can just add the dependency to your `pom.xml`\n\nRepository:\n\n```xml\n<repository>\n    <id>unnamed-releases</id>\n    <url>https://repo.unnamed.team/repository/unnamed-releases/</url>\n</repository>\n```\n\nDependency:\n\n```xml\n<dependency>\n    <groupId>team.unnamed.common</groupId>\n    <artifactId>reflect</artifactId>\n    <version>VERSION</version>\n</dependency>\n```"},"validation":{"validation.md":"# Validation\n\nLibrary for create fail-fast (If an entered argument is invalid, the method must not respond as if it were a valid\nargument) APIs, shorten code, etc.\n\n## Examples\n\nFor example, validating normally\n\n```java\npublic void setPages(List<String> pages) {\n    if (this.pages != null) {\n        throw new IllegalStateException(\"Pages is already defined\");\n    }\n    if (pages == null) {\n        throw new NullPointerException(\"pages cannot be null\");\n    }\n    for (String page : pages) {\n        if (page.length() > 500) {\n            throw new IllegalArgumentException(\"a page cannot contain more than 500 characters\");\n        }\n    }\n    this.pages = pages;\n}\n```\n\nUsing this library:\n\n```java\npublic void setPages(List<String> pages) {\n\n    Validate.state(this.pages == null, \"Pages is already defined!\");\n    Validate.notNull(pages, \"Pages cannot be null\");\n    Validate.argument(Filters.all(page -> page.length() < 500), \"A page cannot contain more than 500 characters\");\n\n    this.pages = pages;\n}\n```\n\n## Why fail-fast?\n\nFail-fast methodology is very important for debugging. Methods that fail quickly in case of providing an invalid\nargument make it easier to search for errors.\n\nThis library helps you create fail-fast methods without the need to write so much code. In addition, it helps you easily\ncreate messages for errors\n\nFor example, in a non-fail-fast method:\n\n```java\npublic String format(String text) {\n    if (text == null) {\n        return null;\n    }\n    return /* format the text */;\n}\n```\n\nThen\n\n```java\nString message = messages.get(\"message-name\"); // nullable, this is the bug\nString formattedMessage = format(message); // null message, null formattedMessage\n// ...do other things with non-fail-fast-methods...\nlog(formattedMessage.replace('.', '/')); // NullPointerException!\n```\n\nIn this case, the error was not reported from the beginning, it was reported later. In this case, you would be seeing\nthe exception's stacktrace, checking on which line it failed, which variable could be null, checking on which line this\nvariable was created, etc.\n\nWith a fail-fast method:\n\n```java\npublic String format(String text) {\n    Validate.notNull(text, \"text cannot be null\");\n    return /* format the text */;\n}\n```\n\nThen\n\n```java\nString message = messages.get(\"message-name\"); // nullable, this is the bug\nString formattedMessage = format(message); // in case of null, fails\n// ...do other things...\nlog(formattedMessage.replace('.', '/'));\n```\n\nThe method fails instantly on passing it a null reference, it fails with a descriptive message about what failed. The\nerror is easily found.\n\nThis was just a case of nullability, but there are more cases, like checking states, arguments, etc.\nCheck [this StackOverflow question and answers](https://stackoverflow.com/questions/271526) for nullability cases.\n\n## Dependency\n\nYou can download the JAR in the repository releases, also you can just add the dependency to your `pom.xml`\n\nRepository:\n\n```xml\n<repository>\n    <id>unnamed-releases</id>\n    <url>https://repo.unnamed.team/repository/unnamed-releases/</url>\n</repository>\n```\n\nDependency:\n\n```xml\n<dependency>\n    <groupId>team.unnamed.common</groupId>\n    <artifactId>validation</artifactId>\n    <version>VERSION</version>\n</dependency>\n```"}}},"hephaestus-engine":{"repo":{"fullName":"unnamed/hephaestus-engine","name":"hephaestus-engine","stars":62,"contents":"https://api.github.com/repos/unnamed/hephaestus-engine/contents/{+path}"},"content":{"read.md":"## Model Reading\n\nTo create a `Model` instance, we provide the concept of `ModelReader`and\nsome built-in implementations like the `bbmodel` reader, which reads models\nfrom the [Blockbench](https://blockbench.net/) `bbmodel` format\n\nEvery model reader instance has a `ModelDataCursor` instance used to assign\na `custom_model_data` property to every model bones. A single instance of\n`ModelDataCursor` should always be used for a resource pack, thus maintaining\nunique `custom_model_data` properties for each bone\n\n\n### BBModel Reader\n\nCreate a `ModelReader` for Blockbench models\n```java\nModelReader reader = BBModelReader.blockbench();\n```\n\nCreate a `ModelReader` for Blockbench models, using an assigned `ModelDataCursor`\n```java\nModelDataCursor modelDataCursor = new ModelDataCursor(0);\nModelReader reader = BBModelReader.blockbench(modelDataCursor);\n```\n\n\n### Examples\n\nReading a Blockbench model from a file\n```java\nModelReader reader = BBModelReader.blockbench();\nFile file = new File(\"model.bbmodel\");\nModel model;\n\ntry (InputStream input = new FileInputStream(file)) {\n    model = reader.read(input);\n} catch (IOException e) {\n    throw new RuntimeException(\"Cannot read blockbench model\", e);\n}\n\n// do something with 'model'\n```\n","readme.md":"# hephaestus-engine documentation\n\nWe provide documentation about:\n- [Reading Models](read.md)\n- [Writing Models to a Resource Pack](resources.md)\n- [Managing Views](views.md)","resources.md":"## Writing Models to a Resource Pack\n\nHephaestus engine uses [creative](https://github.com/unnamed/creative) to interact\nwith resource pack data, we convert a `Model` and its bones to creative's block\nmodels \n\n### Writing to a resource pack ZIP\n```java\nCollection<Model> models = ...;\n\nFile file = new File(\"resource-pack.zip\");\nfile.createNewFile();\n\ntry (FileTree tree = FileTree.zip(new ZipOutputStream(new FileOutputStream(file)))) {\n    ModelWriter.resource(\"mynamespace\").write(tree, models);\n    \n    // you can write your own assets here!\n    // check https://github.com/unnamed/creative\n}\n```\n\n### Writing to a directory\n```java\nCollection<Model> models = ...;\n\nFile directory = new File(\"resource-pack\");\ndirectory.mkdirs();\n\ntry (FileTree tree = FileTree.directory(directory)) {\n    ModelWriter.resource(\"mynamespace\").write(tree, models);\n    \n    // you can write your own assets here!\n    // check https://github.com/unnamed/creative\n}\n```\n\n\n### Removing unused information\n\nAfter we generate the resource pack, some loaded information will be unnecessary,\nto solve this, we can use `Model#discardResourcePackData()`, it removes data\nlike textures, elements, etc. but makes the model unable to be written to a\nresource pack *(writer will throw an exception)*","views.md":"## Model Views\n\n`api` defines an interface `ModelView`, which can be used for basic and\nplatform independent operations such as animations, colors, movements,\nanimation ticking, etc.\n\nTo get a more specialized `ModelView`, you must use the platform specific\nimplementations\n\n\n### Coloring\n\nModel views can be colored with any RGB color, just use `ModelView#colorize`\nor `BoneView#colorize` to colorize a specific bone\n\nExample:\n```java\npublic void setRedColor(ModelView<?> view) {\n    view.colorize(255, 0, 0);    \n}\n```\n\n\n### Animation\n\nAnimations require the programmer to tick animations in every model view\nusing `ModelView#tickAnimations`\n\nExample on Bukkit:\n```java\nBukkit.getScheduler().runTaskTimerAsynchronously(() -> {\n    for (ModelView view : views) {\n        view.tickAnimations();    \n    }\n}, 0L, 1L);\n```\n\nThen you can animate views by just using `AnimationController#queue`, stop\nanimations using `AnimationController#clearQueue`\n\nExample:\n```java\npublic void animate(ModelView<?> view) {\n    // walkAnimation is a ModelAnimation instance that can\n    // be obtained from Model#animations()\n    view.animationController().queue(walkAnimation);\n}\n```"}},"emojis":{"repo":{"fullName":"unnamed/emojis","name":"emojis","stars":15,"contents":"https://api.github.com/repos/unnamed/emojis/contents/{+path}"},"content":{"mcglyph-format-spec.md":"# MCGlyph Format\n\n## Version 1\n\nBytes:\n- Format version (= 1)\n- Glyph count\n- [Glyphs]\n\nGlyph format:\n- Name length (m)\n- (Next \"m * 2\" bytes) Name characters\n- (2 bytes) Height\n- (2 bytes) Ascent\n- (2 bytes) Character\n- Permission length (n)\n- (Next \"n * 2\" bytes) Permission characters\n  (2 bytes) PNG Image length (p)\n- (Next \"p\" bytes) The PNG image"}},"creative":{"repo":{"fullName":"unnamed/creative","name":"creative","stars":3,"contents":"https://api.github.com/repos/unnamed/creative/contents/{+path}"},"content":{"creative":{"readme.md":""},"minecraft":{"font.md":"## Resource Pack Font\n\nA font is completely defined by font providers\n\n|Field Name|Type|Description|\n|---|---|---|\n|`providers`|Array\\<Provider>|The array of font providers that compound this font\n\n### Font Provider\n\nA font provider can be of type `bitmap`, `legacy_unicode` or `ttf`, every\ntype has its own structure and fields\n\n#### BitMap Font Provider\n```json\n{\n    \"type\": \"bitmap\",\n    \"file\": \"namespace:path/to/texture\",\n    \"height\": 8,\n    \"ascent\": 8,\n    \"chars\": [\n        \"qwerty\",\n        \"asdfgh\"\n    ]\n}\n```\n\n#### Legacy Unicode Font Provider\n```json\n{\n    \"type\": \"legacy_unicode\",\n    \"sizes\": \"namespace:path/to/sizes\",\n    \"template\": \"namespace:path/to/%s\"\n}\n```\n\n#### TrueType Font Provider\n```json\n{\n    \"type\": \"ttf\",\n    \"file\": \"namespace:font\",\n    \"shift\": [ 0.5, 0.5 ],\n    \"size\": 0.5,\n    \"oversample\": 1.0,\n    \"skip\": [\"skip\", \"this\", \"char\"]\n}\n```","lang.md":"## Resource Pack Language\n\nThese files live inside `assets/<namespace>/lang`, they are a simple\nJSON file using the translation keys as JSON fields and the translation\nvalues as the JSON string values\n\n### Example\n```json\n{\n    \"number.1\": \"Uno\",\n    \"number.2\": \"Dos\",\n    \"number.3\": \"Tres\",\n    \"number.4\": \"Cuatro\"\n}\n```","metadata.md":"## Resource Metadata\n\nEvery resource pack file and the resource pack itself can have metadata,\nmetadata is sub-divided in metadata parts\n\nThe metadata file is always suffixed with `.mcmeta`, i.e. `pack.mcmeta`,\n`block.png.mcmeta`, the data inside is a JSON object only compound by\nthe metadata parts, i.e.\n```json\n{\n    \"<part name>\": {...},\n    \"<part name 2>\": {...},\n    ...\n    \"<part name N>\": {...}\n}\n```\n\nMinecraft defines the following metadata part types:\n- `pack`\n- `animation`\n- `texture`\n- `villager`\n- `language`\n\n\n### Pack Metadata Part\n\nNamed `pack`, specifies the resource pack metadata, compound by\nthe resource pack format version and description\n\n| Field Name | Type | Description |\n|---|---|---|\n| `pack_format` | Integer | The resource pack format version, every client version has its own pack format. `8` for Minecraft 1.18.1\n| `description` | String or Object | The resource pack description, may be a string or a component JSON\n\n\n### Animation Metadata Part\n\nNamed `animation`, specifies the animation metadata, applicable for\ntextures\n\n| Field Name | Type | Description |\n|---|---|---|\n| `interpolate` | Boolean | Makes the animation be interpolated, the client will generate frames if necessary\n| `width` | Integer | The texture width\n| `height` | Integer | The texture height\n| `frametime` | Integer | The animation default frame time in ticks, frames will use this frame time if they do not specify one\n| `frames` | Array\\<Frame> | The animation frames, see below\n\nWhere `Frame` can be an integer or an object.\nIf it is an integer, it represents the frame position starting from\nthe top.\nIf it is an object, it can specify the frame `index`, which is the\nframe position starting from the top, and the frame `time` in ticks\n\n\n### Texture Metadata Part\n\nNamed `texture`, modifies a texture, applicable to all textures\n\n| Field Name | Type | Description |\n|---|---|---|\n| `blur` | Boolean | `true` to blur texture when viewed from close up\n| `clamp` | Boolean | `true` to stretch the texture\n\n\n### Villager Metadata Part\n\nNamed `villager`, modifies the villager hat rendering, applicable to\n`entity/villager`and `entity/zombie_villager` textures\n\n| Field Name | Type | Description |\n|---|---|---|\n| `hat` | String | May be `none`, `partial` or `full`\n\n\n### Language Metadata Part\n\nNamed `language`, declares custom languages added by this resource pack,\napplicable to the resource pack metadata (root `pack.mcmeta`)\n\n| Field Name | Type | Description |\n|---|---|---|\n| *Language Code* | LanguageEntry |  Declares the language entry\n\nWhere LanguageEntry is an object with the following structure:\n\n| Field Name | Type | Description |\n|---|---|---|\n| `name` | String | The language display name |\n| `region` | String | The language region |\n| `bidirectional` | Boolean | `true` if read from right to left |\n\n#### Example\n```json\n{\n    \"en_US\": {\n        \"name\": \"English\",\n        \"region\": \"US\"\n    },\n    \"namespace:hello\": {\n        \"name\": \"Custom\",\n        \"region\": \"Custom\"\n    }\n}\n```\n\n### Examples\n#### Pack Metadata (pack.mcmeta)\n```json\n{\n    \"pack\": {\n        \"pack_format\": 8,\n        \"description\": \"My resource pack\"\n    },\n    \"language\": {\n        \"en_CUSTOM\": {\n            \"name\": \"Custom English\",\n            \"region\": \"Custom\",\n            \"bidirectional\": false\n        }\n    }\n}\n```\n\n#### Texture Metadata (\\<texture>.mcmeta)\n```json\n{\n    \"animation\": {\n        \"interpolate\": true,\n        \"width\": 8,\n        \"height\": 8,\n        \"frames\": [ 0, 1, 2, 5, 4 ]\n    },\n    \"texture\": {\n        \"blur\": true,\n        \"clamp\": true\n    }\n}\n```","network.md":"## Resource Pack Networking\n\nThe Minecraft: Java Edition protocol defines two packets for resource pack\nhandling\n- **The client-bound Resource Pack packet** which makes the client download and use a resource pack\n- **The server-bound Resource Pack packet** which informs the server about the resource pack download status\n\n\n### Process\nAfter the client receives the resource pack packet, it can respond with\na server-bound Resource Pack Status packet indicating if the client\naccepted the resource pack and will download it (`ACCEPTED`), if the\nclient declined the resource-pack (`DECLINED`), if resource pack download\nfailed (`FAILED`) or if it successfully downloaded the resource pack (`SUCCESS`)\n\nSee [Serving Resource Packs](serving.md) for information about resource pack\nserving on the server side\n\n\n### Client-bound Resource Pack Packet Structure\n\n| Field Name | Type | Description |\n|------------|---------|-------------|\n| URL        | String  | The resource pack URL, accepted schemes are `http`, `https` and `level`\n| Hash       | String  | SHA-1 hash of the resource pack file, must be at most 40 characters long, must match `^[a-fA-F0-9]{40}$` to be considered a valid hash by the client\n| Required   | Boolean | `true` makes the client disconnect if it declines the resource pack\n| Prompt     | Optional Component | Message shown as part of the resource pack prompt\n\n\n### Server-bound Resource Pack Packet Structure\n\n| Field Name | Type | Description |\n|---|---|---|\n| Status | VarInt | The client resource pack status (0 = `SUCCESS`, 1 = `DECLINED`, 2 = `FAILED`, 3 = `ACCEPTED`)","pack-metadata.md":"## Resource Pack Metadata\n\nDefined at the root `pack.mcmeta` file, supports `pack`and `language` \nmetadata parts (See [Metadata](metadata.md))\n\n### Example\n```json\n{\n    \"pack\": {\n        \"pack_format\": 8,\n        \"description\": \"My resource pack\"\n    },\n    \"language\": {\n        \"custom\": {\n            \"name\": \"Custom\",\n            \"region\": \"Custom\",\n            \"bidirectional\": false\n        }\n    }\n}\n```","readme.md":"## Minecraft Resource Pack\n\nResource packs are a Minecraft system that allows players to customize\nthe game by modifying models, textures, languages, sounds, fonts, etc.\nwithout touching the game code, in this directory we document the resource\npack system\n\nRead [Resource Pack File Structure](structure.md) for documentation\nabout the resource pack structure, read [Resource Pack Networking](network.md)\nfor documentation about client-server resource pack interaction","serving.md":"## Serving Resource Packs\n\n*See [Resource Pack Networking](network.md) for information about the client\nand server communication*\n\nAfter the client is requested to download a resource pack at a specified\n`http` or `https` location, it will send an HTTP `GET` request to the\nspecified location. It will also add the following headers to the request\n\n```yaml\nX-Minecraft-Username:     <Player Username>\nX-Minecraft-UUID:         <Player UUID without hyphens>\nX-Minecraft-Version:      <Client Version>\nX-Minecraft-Version-ID:   <Client Version ID>\nX-Minecraft-Pack-Format:  <Resource Pack Format>\nUser-Agent:                Minecraft Java/<Client Version>\n```\n\nThe HTTP server must return a ZIP file with the resource pack files, see the\nZIP file structure [here](structure.md)","structure.md":"## Resource Pack File Structure\n\n**Note that resource pack file names can not have uppercase characters**\n\n- `pack.mcmeta`: The resource pack metadata ([See more](pack-metadata.md))\n- `pack.png`: The resource pack icon\n- `assets`: Root for client resources \n- - `<namespace>`: The resources namespace\n- - - `sounds.json`: The resource pack sound definitions ([See more](sounds.md))\n- - - `blockstates`:\n- - - - `<blockstate>.json`: A block state definition ([See more](blockstate.md))\n- - - `font`:\n- - - - `<font>.json`: A font definition ([See more](font.md))\n- - - `lang`:\n- - - - `<lang>.json`: A set of translations for a language ([See more](lang.md))\n- - - `models`:\n- - - - `<model>.json`: A model definition ([See more](model.md))\n- - - `sounds`:\n- - - - `<sound>.ogg`: An OGG sound\n- - - `textures`:\n- - - - `<texture>.png`: A PNG texture"},"readme.md":"# creative\n\nSee [minecraft](minecraft/readme.md) directory for documentation of Minecraft: Java\nEdition resource packs, it does not contain any specific documentation about `creative`\nbut there are some comparisons\n\nSee [creative](creative/readme.md) directory for documentation about this library,\nits usage and some design patterns we follow"}}}